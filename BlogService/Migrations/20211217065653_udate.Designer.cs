// <auto-generated />
using System;
using BlogService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogService.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211217065653_udate")]
    partial class udate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogService.Database.BlogArticle", b =>
                {
                    b.Property<int>("BlogArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BlogArticleCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("BlogContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlogTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDisplay")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfLikes")
                        .HasColumnType("int");

                    b.Property<int>("NoOfViews")
                        .HasColumnType("int");

                    b.HasKey("BlogArticleId");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("BlogArticles");
                });

            modelBuilder.Entity("BlogService.Database.BlogCategory", b =>
                {
                    b.Property<int>("BlogCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BlogCategoryCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDisplay")
                        .HasColumnType("bit");

                    b.HasKey("BlogCategoryId");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("BlogService.Database.BlogComment", b =>
                {
                    b.Property<int>("BlogCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CommentCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplay")
                        .HasColumnType("bit");

                    b.HasKey("BlogCommentId");

                    b.HasIndex("BlogArticleId");

                    b.ToTable("BlogComments");
                });

            modelBuilder.Entity("BlogService.Database.BlogArticle", b =>
                {
                    b.HasOne("BlogService.Database.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("BlogService.Database.BlogComment", b =>
                {
                    b.HasOne("BlogService.Database.BlogArticle", "Blog")
                        .WithMany("Blogcomments")
                        .HasForeignKey("BlogArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("BlogService.Database.BlogArticle", b =>
                {
                    b.Navigation("Blogcomments");
                });

            modelBuilder.Entity("BlogService.Database.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });
#pragma warning restore 612, 618
        }
    }
}
